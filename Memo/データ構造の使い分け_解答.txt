1. 寿命管理されるタスクの順次更新処理を行いたい 
ゲーム中のパーティクルエフェクトのような寿命管理されるタスクの、順次更新処理を行いたい。 

解答：リスト
理由：「寿命管理」とあることから、生成されたら処理し、削除されたら処理をしない必要があり、
　　　どの場所のデータが削除されるのか不明なことから、リストが最適である。





2. 連番のIDをキーとして要素を取得したい 
IDをキーに、データを高速に取得したい。 
但し、IDは32bit符号なし整数値であり、既知の範囲の連番であることがわかっている。 

解答：配列
理由：IDの値が正の数であり、「既知の範囲の連番」であることから、
　　　メモリが連続である配列が最適ため。





3. ランダムなIDをキーとして要素を取得したい 
IDをキーに、データを高速に取得したい。 
但し、IDは32bit符号なし整数値であり、ランダムな値であることがわかっている。 

解答：ハッシュテーブル 
理由：キーの値がランダムであることから、キーをもとに値を探索する必要があるため。





4. 派生クラスを順次実行したい 
下記の基底コマンドクラスの派生クラスを登録させ、それを登録順に順次実行するようなクラスを作成したい。 
ただし、登録したコマンドの実行は一度きりである。

解答：キュー
理由：「登録順に順次実行する」とあることから、先入先出であるキューが最適である。
　　　また、「実行が一度きり」なため、実行時にデキューをすれば容易に実装できる。





5. バイナリ内に格納された数式の解析器を作成したい
テキストスクリプト中の数式をバイナリに変換するにあたって、ランタイムでの実行効率を考慮し、 
逆ポーランド記法で格納することが決定された。格納された数式の解析器を作成したい。

解答：スタック
理由：「2 3 +」のように単純な式であればリストでも良いが、
　　　括弧が存在する場合、括弧の中の式が優先されるため、後入先出であるスタックが最適である。